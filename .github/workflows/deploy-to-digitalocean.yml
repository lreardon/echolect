name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Environment (.env)
        working-directory: .
        run: |
          cp .env.template .env
          sed -i 's/RAILS_ENV=/RAILS_ENV=production/' .env
          sed -i 's/RAILS_MASTER_KEY=/RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }}/' .env
          sed -i 's/DOMAIN=/DOMAIN=echolect.co/' .env
          # TODO: Change the prod POSTGRES credentials and then store them as secrets
          sed -i 's/POSTGRES_DB=/POSTGRES_DB=prod/' .env
          sed -i 's/POSTGRES_USER=/POSTGRES_USER=proddy/' .env
          sed -i 's/POSTGRES_PASSWORD=/POSTGRES_PASSWORD=proddy_password/' .env
      - name: Rsync Deploy
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -avzr --delete
          path: .
          remote_path: ~/server/
          remote_host: ${{ secrets.SSH_HOST }}
          remote_user: ${{ secrets.SSH_USERNAME }}
          remote_key: ${{ secrets.SSH_KEY }}
      # - name: Build Containers
      #   uses: appleboy/ssh-action@v1.0.3
      #   with:
      #     host: ${{ secrets.SSH_HOST }}
      #     username: ${{ secrets.SSH_USERNAME }}
      #     key: ${{ secrets.SSH_KEY }}
      #     script: |
      #       cd ~/server
      #       docker-compose -f docker-compose.production.yml up -d --build
      # - name: Bundle Install
      #   uses: appleboy/ssh-action@v1.0.3
      #   with:
      #     host: ${{ secrets.SSH_HOST }}
      #     username: ${{ secrets.SSH_USERNAME }}
      #     key: ${{ secrets.SSH_KEY }}
      #     script: |
      #       cd ~/server
      #       bundle install
      - name: Build Containers if needed
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/server
            if ! docker ps -a | grep -q webapp; then
              echo "Webapp container not found. Building containers..."
              docker-compose -f docker-compose.production.yml up -d --build
            else
              echo "Webapp container already exists."
            fi
      - name: Run Migrations
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/server
            docker exec webapp bundle exec rails db:migrate RAILS_ENV=production
      # - name: Precompile assets
      #   uses: appleboy/ssh-action@v1.0.3
      #   with:
      #     host: ${{ secrets.SSH_HOST }}
      #     username: ${{ secrets.SSH_USERNAME }}
      #     key: ${{ secrets.SSH_KEY }}
      #     script: |
      #       cd ~/server/
      #       rails assets:precompile
      - name: Restart Webapp
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: docker restart webapp && docker restart nginx
